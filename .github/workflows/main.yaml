name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  REGION: ${{ secrets.GCP_REGION }}
  GAR_REPO_ID: ${{ secrets.GAR_REPO_ID }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }} 
  GKE_CLUSTER: mavoyan-cp-cluster
  HELM_RELEASE: petclinic
  HELM_CHART_DIR: ~/helm
  IMAGE_NAME: spring-petclinic

jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.version }}
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install semver
        run: pip install semver

      - name: Generate Git Tag
        id: tag
        run: |
          VERSION=$(python semver_tag.py)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        id: build
        run: |
          IMAGE=${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPO_ID }}/${{ env.IMAGE_NAME }}
          VERSION=${{ steps.tag.outputs.version }}
          docker build -t $IMAGE:$VERSION .
          docker push $IMAGE:$VERSION
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_GKE }}'

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.REGION }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Deploy Helm
        run: |
          export CLUSTER_NAME=${{ env.CLUSTER_NAME }}
          export REGION=${{ env.REGION }}
          export GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          export HELM_RELEASE=${{ env.HELM_RELEASE }}
          export HELM_CHART_DIR=~/helm/petclinic
          export IMAGE=${{ needs.build-and-tag.outputs.image }}
          export VERSION=${{ needs.build-and-tag.outputs.version }}

          # echo "Authenticating to GKE..."
          # gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $GCP_PROJECT_ID

          echo "Installing Ingress Controller (if needed)..." 
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update

          helm upgrade --install nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx --create-namespace \
          --set controller.service.type=LoadBalancer

          helm install "$HELM_RELEASE" "$HELM_CHART_DIR/$HELM_RELEASE" \
          --set ingress.className=nginx

          echo "Waiting for Ingress IP..."
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || true)
            if [[ -n "$INGRESS_IP" ]]; then break; fi 
            sleep 10
          done

          if [[ -z "$INGRESS_IP" ]]; then
            echo "❌ Ingress controller did not get an external IP." >&2
            exit 1
          fi

          echo "✅ Application should be available soon at: http://$INGRESS_IP"
